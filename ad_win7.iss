; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!


#define MyAppName "cbinfoskjerm"
#define MyAppExeName "cbinfoskjerm.exe"
#define MyAppIcoName "icon.ico"

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
UninstallDisplayIcon={uninstallexe}
AppId={{60BE3979-5B3D-4AA8-A53A-9754857A900}
AppName=cbinfoskjerm
AppVersion=1.0
;AppVerName=bitB Learning Tool 1.0
AppPublisher=Combrokers
AppPublisherURL=http://www.mcgrainer.com/
AppSupportURL=http://www.mcgrainer.com/
AppUpdatesURL=http://www.mcgrainer.com/
DefaultDirName={pf}\cbinfoskjerm
DisableDirPage=yes
DisableProgramGroupPage=yes
OutputDir=C:\Users\www\Desktop\Projects\ad_show\exe\
OutputBaseFilename=cbinfoskjerm
SetupIconFile=C:\Users\www\Desktop\Projects\ad_show\files\icon.ico
Compression=lzma
SolidCompression=yes
PrivilegesRequired=admin

[Languages]
Name: "english"; MessagesFile: "compiler:Default.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}";
Name: "quicklaunchicon"; Description: "{cm:CreateQuickLaunchIcon}"; GroupDescription: "{cm:AdditionalIcons}";  OnlyBelowVersion: 0,6.1

[Files]
Source: "C:\Users\www\Desktop\Projects\ad_show\dist\cbinfoskjerm\cbinfoskjerm.exe"; DestDir: "{app}"; Flags: ignoreversion
Source: "C:\Users\www\Desktop\Projects\ad_show\dist\cbinfoskjerm\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
Source: "C:\Users\www\Desktop\Projects\ad_show\files\*"; DestDir: "{app}"; Flags: ignoreversion recursesubdirs createallsubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files


[Icons]
; start menu icons
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}" ;    IconFilename: "{app}\{#MyAppIcoName}";Flags: foldershortcut
Name: "{commonprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}" ;    IconFilename: "{app}\{#MyAppIcoName}";Flags: foldershortcut
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}" ;    IconFilename: "{app}\{#MyAppIcoName}";Flags: foldershortcut

;Name: "{userdesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}" ;    IconFilename: "{app}\{#MyAppIcoName}";Flags: foldershortcut
;Name: "{userprograms}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}" ;    IconFilename: "{app}\{#MyAppIcoName}";Flags: foldershortcut


;start at windows
Name: "{commonstartup}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"

[Run]
Filename: "{app}\{#MyAppExeName}"; Description: "{cm:LaunchProgram,{#MyAppName}}"; Flags: nowait postinstall skipifsilent


[Code]

/////////////////////////////////////////////////////////////////////
function GetUninstallString(): String;
var
  sUnInstPath: String;
  sUnInstallString: String;
begin
  sUnInstPath := ExpandConstant('Software\Microsoft\Windows\CurrentVersion\Uninstall\{#emit SetupSetting("AppId")}_is1');
  sUnInstallString := '';
  if not RegQueryStringValue(HKLM, sUnInstPath, 'UninstallString', sUnInstallString) then
    RegQueryStringValue(HKCU, sUnInstPath, 'UninstallString', sUnInstallString);
  Result := sUnInstallString;
end;


/////////////////////////////////////////////////////////////////////
function IsUpgrade(): Boolean;
begin
  Result := (GetUninstallString() <> '');
end;


/////////////////////////////////////////////////////////////////////
function UnInstallOldVersion(): Integer;
var
  sUnInstallString: String;
  iResultCode: Integer;
begin
// Return Values:
// 1 - uninstall string is empty
// 2 - error executing the UnInstallString
// 3 - successfully executed the UnInstallString

  // default return value
  Result := 0;

  // get the uninstall string of the old app
  sUnInstallString := GetUninstallString();
  if sUnInstallString <> '' then begin
    sUnInstallString := RemoveQuotes(sUnInstallString);
    if Exec(sUnInstallString, '','', SW_HIDE, ewWaitUntilTerminated, iResultCode) then
      Result := 3
    else
      Result := 2;
  end else
    Result := 1;
end;

/////////////////////////////////////////////////////////////////////
procedure CurStepChanged(CurStep: TSetupStep);
begin
  if (CurStep=ssInstall) then
  begin
    if (IsUpgrade()) then
    begin
      UnInstallOldVersion();
    end;
  end;
end;
